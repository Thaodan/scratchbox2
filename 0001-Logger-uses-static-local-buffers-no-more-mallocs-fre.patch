From 6ebcd1b12cf2689bb58ef92876fa29f9eff5e258 Mon Sep 17 00:00:00 2001
From: Lauri Aarnio <Lauri.Aarnio@iki.fi>
Date: Fri, 20 Jan 2012 00:12:18 +0200
Subject: [PATCH] Logger uses static/local buffers (no more mallocs/frees!)

---
 sblib/sb_log.c |  106 ++++++++++++++++++++++++++++++-------------------------
 1 files changed, 58 insertions(+), 48 deletions(-)

diff --git a/sblib/sb_log.c b/sblib/sb_log.c
index 984e7d1..6b09147 100644
--- a/sblib/sb_log.c
+++ b/sblib/sb_log.c
@@ -50,6 +50,30 @@
 #include "exported.h"
 #include "scratchbox2_version.h"
 
+/* -------- Config: buffer sizes: */
+
+#define LOG_TIMESTAMP_BUFSIZE 24
+
+/* max.len. of the log message, including \0 but not including line headers */
+#define LOG_MSG_MAXLEN	500
+
+/* max.len. of source file name + line number field */
+#define LOG_SRCLOCATION_MAXLEN	150
+
+#define LOG_LEVELNAME_MAXLEN 10
+
+#define LOG_BINARYNAME_MAXLEN 80
+
+#define LOG_PIDANDTID_MAXLEN 80
+
+/* max. size of one line:
+ * timestamp (levelname)\tbinaryname,process_and_thread_id\tlogmsg,srclocation */
+#define LOG_LINE_BUFSIZE (LOG_TIMESTAMP_BUFSIZE+2+LOG_LEVELNAME_MAXLEN+2+ \
+			  LOG_BINARYNAME_MAXLEN+LOG_PIDANDTID_MAXLEN+1+ \
+			  LOG_MSG_MAXLEN+LOG_SRCLOCATION_MAXLEN)
+
+#define LOGFILE_NAME_BUFSIZE 512
+
 /* ===================== Internal state variables =====================
  *
  * N.B. no mutex protecting concurrent writing to these variables.
@@ -58,15 +82,15 @@
 */
 
 static struct sb_log_state_s {
-	const char	*sbl_logfile;
-	const char	*sbl_binary_name;
 	int		sbl_print_file_and_line;
 	int		sbl_simple_format;
+	char		sbl_binary_name[LOG_BINARYNAME_MAXLEN];
+	char		sbl_logfile[LOGFILE_NAME_BUFSIZE];
 } sb_log_state = {
-	.sbl_logfile = NULL,
-	.sbl_binary_name = "UNKNOWN",
 	.sbl_print_file_and_line = 0,
 	.sbl_simple_format = 0,
+	.sbl_binary_name = {0},
+	.sbl_logfile = {0},
 };
 
 /* ===================== public variables ===================== */
@@ -96,7 +120,6 @@ static void make_log_timestamp(char *buf, size_t bufsize)
 		tm.tm_year+1900, tm.tm_mon+1, tm.tm_mday,
 		tm.tm_hour, tm.tm_min, tm.tm_sec, (int)(now.tv_usec/1000));
 }
-#define LOG_TIMESTAMP_BUFSIZE 24
 
 /* Write a message block to a logfile.
  *
@@ -112,8 +135,8 @@ static void write_to_logfile(const char *msg, int msglen)
 {
 	int logfd;
 
-	if (sb_log_state.sbl_logfile) {
-		if (*sb_log_state.sbl_logfile == '-' &&
+	if (sb_log_state.sbl_logfile[0]) {
+		if (sb_log_state.sbl_logfile[0] == '-' &&
 		    sb_log_state.sbl_logfile[1] == '\0') {
 			/* log to stdout. */
 			int r; /* needed to get around some unnecessary warnings from gcc*/
@@ -156,7 +179,6 @@ void sblog_init_level_logfile_format(const char *opt_level, const char *opt_logf
 			 * set .sbl_binary_name to 
 			 * scriptbasename{interpreterbasename}
 			*/
-			char *full_name = NULL;
 			char *cp;
 
 			if ((cp=strrchr(sbox_exec_name, '/')) != NULL) {
@@ -164,18 +186,16 @@ void sblog_init_level_logfile_format(const char *opt_level, const char *opt_logf
 			} else {
 				cp = sbox_exec_name;
 			}
-			if (asprintf(&full_name, "%s{%s}", cp, sbox_binary_name) < 0) {
-				if (sbox_binary_name)
-					sb_log_state.sbl_binary_name = sbox_binary_name;
-			} else {
-				sb_log_state.sbl_binary_name = full_name;
-			}
+			snprintf(sb_log_state.sbl_binary_name, sizeof(sb_log_state.sbl_binary_name),
+				"%s{%s}", cp, sbox_binary_name);
 		} else {
-			if (sbox_binary_name)
-				sb_log_state.sbl_binary_name = sbox_binary_name;
+			snprintf(sb_log_state.sbl_binary_name, sizeof(sb_log_state.sbl_binary_name),
+				"%s", sbox_binary_name ? sbox_binary_name : "");
 		}
 
-		sb_log_state.sbl_logfile = opt_logfile ? opt_logfile : getenv("SBOX_MAPPING_LOGFILE");
+		snprintf(sb_log_state.sbl_logfile, sizeof(sb_log_state.sbl_logfile),
+			"%s", (opt_logfile ? opt_logfile : getenv("SBOX_MAPPING_LOGFILE")));
+
 		level_str = opt_level ? opt_level : getenv("SBOX_MAPPING_LOGLEVEL");
 		if (sb_log_state.sbl_logfile) {
 			if (level_str) {
@@ -259,11 +279,11 @@ void sblog_vprintf_line_to_logfile(
 	va_list		ap)
 {
 	char	tstamp[LOG_TIMESTAMP_BUFSIZE];
-	char	*logmsg = NULL;
-	char	*finalmsg = NULL;
+	char	logmsg[LOG_MSG_MAXLEN];
+	char	finalmsg[LOG_LINE_BUFSIZE];
 	int	msglen;
 	char	*forbidden_chrp;
-	char	*optional_src_location;
+	char	optional_src_location[LOG_SRCLOCATION_MAXLEN];
 	char	*levelname = NULL;
 
 	if (sb_loglevel__ == SB_LOGLEVEL_uninitialized) sblog_init();
@@ -276,10 +296,15 @@ void sblog_vprintf_line_to_logfile(
 	}
 
 	/* next, print the log message to a buffer: */
-	if (vasprintf(&logmsg, format, ap) < 0) {
+	msglen = vsnprintf(logmsg, sizeof(logmsg), format, ap);
+
+	if (msglen < 0) {
 		/* OOPS. should log an error message, but this is the
 		 * logger... can't do it */
-		logmsg = NULL;
+		logmsg[0] = '\0';
+	} else if (msglen > (int)sizeof(logmsg)) {
+		/* message was truncated. logmsg[LOG_MSG_MAXLEN-1] is '\0' */
+		logmsg[LOG_MSG_MAXLEN-3] = logmsg[LOG_MSG_MAXLEN-2] = '.';
 	}
 
 	/* post-format the log message.
@@ -293,7 +318,6 @@ void sblog_vprintf_line_to_logfile(
 	 * Second, replace all tabs by spaces because of similar reasons
 	 * as above. We'll use tabs to separate the pre-defined fields below.
 	*/
-	msglen = strlen(logmsg);
 	while ((msglen > 0) && (logmsg[msglen-1] == '\n')) {
 		logmsg[msglen--] = '\0';
 	}
@@ -309,11 +333,9 @@ void sblog_vprintf_line_to_logfile(
 	 * if present, should always be the last field (so that same
 	 * post-processing tools can be used in both cases)  */
 	if (sb_log_state.sbl_print_file_and_line) {
-		if (asprintf(&optional_src_location, "\t[%s:%d]", file, line) < 0) {
-			optional_src_location = NULL;
-		}
+		snprintf(optional_src_location, sizeof(optional_src_location), "\t[%s:%d]", file, line);
 	} else {
-		optional_src_location = strdup("");
+		optional_src_location[0] = '\0';
 	}
 
 	switch(level) {
@@ -329,20 +351,16 @@ void sblog_vprintf_line_to_logfile(
 		 * it easier to compare logfiles.
 		*/
 		if(levelname) {
-			if (asprintf(&finalmsg, "(%s)\t%s\t%s%s\n",
+			snprintf(finalmsg, sizeof(finalmsg), "(%s)\t%s\t%s%s\n",
 				levelname, sb_log_state.sbl_binary_name, 
-				logmsg, optional_src_location) < 0) {
-				finalmsg = NULL;
-			}
+				logmsg, optional_src_location);
 		} else {
-			if (asprintf(&finalmsg, "(%d)\t%s\t%s%s\n",
+			snprintf(finalmsg, sizeof(finalmsg), "(%d)\t%s\t%s%s\n",
 				level, sb_log_state.sbl_binary_name, 
-				logmsg, optional_src_location) < 0) {
-				finalmsg = NULL;
-			}
+				logmsg, optional_src_location);
 		}
 	} else {
-		char	process_and_thread_id[80];
+		char	process_and_thread_id[LOG_PIDANDTID_MAXLEN];
 
 		if (pthread_library_is_available && pthread_self_fnptr) {
 			pthread_t	tid = (*pthread_self_fnptr)();
@@ -356,27 +374,19 @@ void sblog_vprintf_line_to_logfile(
 
 		/* full format */
 		if(levelname) {
-			if (asprintf(&finalmsg, "%s (%s)\t%s%s\t%s%s\n",
+			snprintf(finalmsg, sizeof(finalmsg), "%s (%s)\t%s%s\t%s%s\n",
 				tstamp, levelname, sb_log_state.sbl_binary_name, 
 				process_and_thread_id, logmsg,
-				optional_src_location) < 0) {
-				finalmsg = NULL;
-			}
+				optional_src_location);
 		} else {
-			if (asprintf(&finalmsg, "%s (%d)\t%s%s\t%s%s\n",
+			snprintf(finalmsg, sizeof(finalmsg), "%s (%d)\t%s%s\t%s%s\n",
 				tstamp, level, sb_log_state.sbl_binary_name, 
 				process_and_thread_id, logmsg,
-				optional_src_location) < 0) {
-				finalmsg = NULL;
-			}
+				optional_src_location);
 		}
 	}
 
 	write_to_logfile(finalmsg, strlen(finalmsg));
-
-	free(finalmsg);
-	free(logmsg);
-	free(optional_src_location);
 }
 
 void sblog_printf_line_to_logfile(
-- 
1.7.3.4

