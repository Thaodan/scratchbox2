From 957653d7d480435a6c8b9e9b81d712623d7d7a0e Mon Sep 17 00:00:00 2001
From: Juha Kallioinen <juha.kallioinen@jollamobile.com>
Date: Sat, 11 May 2013 18:31:01 +0000
Subject: [PATCH] Fix IF_EXISTS_IN rule to require then_actions

Planned code reuse had some side effects, reverting some changes
from 4de90a4.

Signed-off-by: Juha Kallioinen <juha.kallioinen@jollamobile.com>
---
 lua_scripts/add_rules_to_rule_tree.lua |    2 ++
 lua_scripts/create_reverse_rules.lua   |    8 ++++++++
 pathmapping/paths_ruletree_mapping.c   |   12 ++++++------
 utils/sb2-ruletree.c                   |    2 +-
 4 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/lua_scripts/add_rules_to_rule_tree.lua b/lua_scripts/add_rules_to_rule_tree.lua
index e706699..aeb121a 100644
--- a/lua_scripts/add_rules_to_rule_tree.lua
+++ b/lua_scripts/add_rules_to_rule_tree.lua
@@ -154,6 +154,8 @@ function add_one_rule_to_rule_tree(rule, modename)
 	elseif (rule.rules) then
 		action_type = RULE_ACTION_SUBTREE
 		rule_list_link = get_rule_tree_offset_for_rule_list(rule.rules, modename)
+       elseif (rule.then_actions) then
+               rule_list_link = get_rule_tree_offset_for_rule_list(rule.then_actions, modename)
 	end
 
 	-- Aux.conditions. these can be used in conditional actions.
diff --git a/lua_scripts/create_reverse_rules.lua b/lua_scripts/create_reverse_rules.lua
index afcda03..b1fee06 100644
--- a/lua_scripts/create_reverse_rules.lua
+++ b/lua_scripts/create_reverse_rules.lua
@@ -41,6 +41,10 @@ end
 function reverse_conditional_actions(output_rules, rev_rule_name, rule, n, forward_path, modename)
 	local actions = rule.actions
 
+	if actions == nil then
+	   actions = rule.then_actions
+	end
+
 	local a
         for a = 1, table.maxn(actions) do
 		-- actions are only partial rules; the "selector" is in
@@ -122,6 +126,10 @@ function reverse_one_rule_xxxx(output_rules, rule, n, forward_path, modename)
 			reverse_conditional_actions(output_rules, new_rule.name,
 				rule, n, forward_path, modename)
 			return
+		elseif (rule.then_actions) then
+			reverse_conditional_actions(output_rules, new_rule.name,
+				rule, n, forward_path, modename)
+			return
 		elseif (rule.map_to) then
 			d_path = rule.map_to .. forward_path
 			new_rule.replace_by = forward_path
diff --git a/pathmapping/paths_ruletree_mapping.c b/pathmapping/paths_ruletree_mapping.c
index c23d99d..24e41ae 100644
--- a/pathmapping/paths_ruletree_mapping.c
+++ b/pathmapping/paths_ruletree_mapping.c
@@ -418,7 +418,7 @@ static int if_exists_in(ruletree_fsrule_t *action,
 	}
 	if (sb_path_exists(test_path)) {
 		SB_LOG(SB_LOGLEVEL_DEBUG,
-			"if_exists_in: True '%s' -> proceed to sub actions", test_path);
+			"if_exists_in: True '%s' -> proceed to then_actions", test_path);
                 free(test_path);
                 return (1);
 	}
@@ -663,16 +663,16 @@ static char *ruletree_execute_conditional_actions(
                                 case SB2_RULETREE_FSRULE_CONDITION_IF_EXISTS_IN:
                                   if (if_exists_in(action_cand_p, abs_clean_virtual_path)) {
                                     /* found, jump to the new rule tree branch */
-                                    ruletree_object_offset_t sub_actions_offset = action_cand_p->rtree_fsr_rule_list_link;
-                                    if (!sub_actions_offset) {
-                                      SB_LOG(SB_LOGLEVEL_DEBUG, "if_exists_in: no sub actions found");
+                                    ruletree_object_offset_t then_actions_offset = action_cand_p->rtree_fsr_rule_list_link;
+                                    if (!then_actions_offset) {
+                                      SB_LOG(SB_LOGLEVEL_DEBUG, "if_exists_in: no then_actions found");
                                       /* continue with normal rule tree */
                                       continue;
                                     }
                                     else {
-                                      SB_LOG(SB_LOGLEVEL_DEBUG, "if_exists_in: sub actions found (%d)", sub_actions_offset);
+                                      SB_LOG(SB_LOGLEVEL_DEBUG, "if_exists_in: then_actions found (%d)", then_actions_offset);
                                       ruletree_fsrule_t new_rules = *rule_selector;
-                                      new_rules.rtree_fsr_rule_list_link = sub_actions_offset;
+                                      new_rules.rtree_fsr_rule_list_link = then_actions_offset;
                                       return ruletree_execute_conditional_actions(ctx, result_log_level,
                                                                                   abs_clean_virtual_path, flagsp,
                                                                                   exec_policy_name_ptr, errormsgp,
diff --git a/utils/sb2-ruletree.c b/utils/sb2-ruletree.c
index 2e8a561..b2322db 100644
--- a/utils/sb2-ruletree.c
+++ b/utils/sb2-ruletree.c
@@ -278,7 +278,7 @@ static void dump_rules(ruletree_object_offset_t offs, int indent)
 	case SB2_RULETREE_FSRULE_ACTION_IF_EXISTS_IN:
 		printf("if_exists_in '%s'\n",
 			offset_to_ruletree_string_ptr(rule->rtree_fsr_action_offs, NULL));
-		rule_list_link_label = "actions";
+		rule_list_link_label = "then_actions";
 		break;
 	default:
 		printf("ERROR: Unknown action type %d\n",
-- 
1.7.10.3

